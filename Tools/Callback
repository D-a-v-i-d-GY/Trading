import matplotlib
import matplotlib.pyplot as plt
from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas
from matplotlib.figure import Figure
from tensorflow import keras
import numpy as np
import wandb


from keras.models import Sequential, load_model


def create_dataset_by_pred(data, model, N, look_back, rep_pred=True):
    if rep_pred:
        pred_data = data
        for i in range(N):
            next_input = pred_data[-look_back:][np.newaxis, :, np.newaxis]
            next_data = model.predict(next_input)
            pred_data = np.append(pred_data, next_data)
            pred_data = pred_data
        return pred_data[-N:]
    else:
        return model.predict(data[:, :, np.newaxis])


class MyPlotCallback(keras.callbacks.Callback):
    def __init__(self, trainX, trainY, testX, testY, look_back, filepath):
        self.filepath = filepath
        self.trainX = trainX
        self.trainY = trainY
        self.testX = testX
        self.testY = testY
        self.look_back = look_back

    def on_epoch_end(self, epoch, logs):
        pred_pure = create_dataset_by_pred(self.trainX[-1, :, 0],
                                           self.model, self.testX.shape[0], self.look_back)
        pred = self.model.predict(self.testX)

        # Generate a figure with matplotlib</font>
        figure = plt.figure(figsize=(40, 25))

        font = {'family': 'DejaVu Sans',
                'weight': 'bold',
                'size': 35}

        matplotlib.rc('font', **font)

        ax1 = plt.subplot2grid((1, 2), (0, 0), fig=figure)
        ax2 = plt.subplot2grid((1, 2), (0, 1), sharex=ax1, sharey=ax1, fig=figure)

        plt.subplots_adjust(left=0.05, bottom=0.05, top=0.98, right=0.98, wspace=0.06)

        len_pred_pure = len(pred_pure)
        len_pred = len(pred)
        len_testY = len(self.testY)

        ax1.plot([i / len_pred_pure for i in range(len_pred_pure)], pred_pure, color='red', linewidth=5)
        ax1.plot([i / len_testY for i in range(len_testY)], self.testY, color='blue', linewidth=5)
        plt.xticks(fontsize='35')
        plt.yticks(fontsize='35')

        ax2.plot([i / len_pred_pure for i in range(len_pred)], pred, color='red', linewidth=5)
        ax2.plot([i / len_testY for i in range(len_testY)], self.testY, color='blue', linewidth=5)

        plt.xticks(fontsize='35')
        plt.yticks(fontsize='35')

        plt.savefig(self.filepath + f'/{epoch}.png')

        plt.close(figure)



